{"version":3,"sources":["assets/icons/plus-circle.svg","assets/icons/undo-alt.svg","assets/icons/cog.svg","components/button/Button.js","components/modal/Modal.js","components/meme-text-settings-modal/MemeTextSettingsModal.js","components/meme-text-input/MemeTextInput.js","components/header/Header.js","components/meme-image/MemeImage.js","components/meme-selection-image/MemeSelectionImage.js","components/meme-selection/MemeSelection.js","utils/api.js","components/image-upload-modal/ImageUploadModal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","onButtonClick","className","classes","buttonIcon","alt","src","buttonText","Modal","onClose","getAppropriateStyle","showModal","display","id","style","this","children","React","Component","MemeTextSettingsModal","onColorHexInput","e","memeTextSettings","state","color","target","value","setState","handleFontChange","fontFamily","getMemeTextSettings","getMemeSettings","htmlFor","type","placeholder","onKeyDown","onChange","name","plusCircleIcon","MemeTextInput","onEnter","a","key","textData","text","onTextInput","_","settings","prevState","labelText","cog","Header","canvas","MemeSelectionImage","memeSelectionImageStyle","url","backgroundImage","backgroundPosition","backgroundSize","meme","onMemeSelection","MemeSelection","memes","then","map","i","axios","require","getAllMemes","get","response","data","splice","catch","error","fabricObject","MemeImage","getMemeDivWidth","memeColRef","current","offsetWidth","getAppropriateCanvasHeight","memeWidth","memeHeight","addImageToMeme","imageObject","fabric","Image","fromURL","image","add","onImageAddedToMeme","saveImage","link","document","createElement","href","toDataURL","format","quality","download","click","onImageSaved","onImageDownloaded","loadCanvasData","loadFromJSON","renderAll","memeTextObject","createRef","Canvas","prevPrps","console","log","imageToAddToMeme","memeBackgroundImage","loadBackgroundImageToCanvas","addTextToCanvas","saveCanvasData","downloadCanvas","onMemeTextClear","deleteCanvasObjects","resetCanvas","onCanvasReset","on","handleMouseOut","JSON","stringify","toJSON","remove","getObjects","Text","fill","left","top","width","height","setHeight","setWidth","setBackgroundImage","bind","scaleX","scaleY","crossOrigin","ref","stateChanges","getAppropriateFormat","imageObj","callback","URL","createObjectURL","img","onload","onImageChange","event","files","uploadImage","self","clearImageUpload","imageUpload","addImage","App","currentMeme","memeTextObj","downloadMeme","onShowImageBgUploadModalClose","showImageBgUploadModal","onShowImageAddModalClose","showImageAddModal","addYourOwnImage","addImageTomMeme","api","label","undoIcon","ImageUploadModal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e6451b58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plus-circle.2b2138f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/undo-alt.5ee04a94.svg\";","module.exports = __webpack_public_path__ + \"static/media/cog.8db53187.svg\";","import React from 'react'\r\nimport \"./button.scss\";\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <button onClick={props.onButtonClick} className={`button ${props.classes}`}> { props.buttonIcon ? <img className=\"icon\" alt=\"icon\" src={props.buttonIcon}></img> : ''}\r\n            {props.buttonText}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport \"./modal.scss\";\r\n\r\nclass Modal extends React.Component {\r\n\r\n    onClose = () => {\r\n        this.props.onClose();\r\n    }\r\n\r\n    getAppropriateStyle = (showModal) => {\r\n        return showModal ? { display: \"block\" } : { display: \"none\" };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"modal\" className=\"modal\" style={this.getAppropriateStyle(this.props.showModal)}>\r\n                <div className=\"modal-content\">\r\n                    <span className=\"close\" onClick={this.onClose}>&times;</span>\r\n                    <div>\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react'\r\nimport \"./meme-text-settings-modal.scss\";\r\nimport Modal from \"../modal/Modal\";\r\nimport Button from \"../button/Button\";\r\nimport plusCircleIcon from '../../assets/icons/plus-circle.svg';\r\n\r\nclass MemeTextSettingsModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            memeTextSettings: {\r\n                color: \"#000000\",\r\n                fontFamily: \"Impact\"\r\n            }\r\n        }\r\n    }\r\n\r\n    onColorHexInput = (e) => {\r\n        let memeTextSettings = { ...this.state.memeTextSettings };\r\n        memeTextSettings.color = e.target.value;\r\n        this.setState({ memeTextSettings });\r\n    };\r\n\r\n    handleFontChange = (e) => {\r\n        let memeTextSettings = { ...this.state.memeTextSettings };\r\n        memeTextSettings.fontFamily = e.target.value;\r\n        this.setState({ memeTextSettings });\r\n    }\r\n\r\n    getMemeTextSettings = () => {\r\n        this.props.getMemeSettings(this.state.memeTextSettings);\r\n    }\r\n\r\n    onClose = () => {\r\n        this.props.onClose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal showModal={this.props.showModal} onClose={this.onClose}>\r\n                <div className=\"field\">\r\n                    <label className=\"label\" htmlFor=\"hex-color\">Color</label>\r\n                    <div className=\"control\">\r\n                        <input className=\"input\" type=\"text\" id=\"hex-color-input\" placeholder=\"#ffffff\" onKeyDown={this.onColorHexInput} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <label className=\"label\" htmlFor=\"font-field\">Font</label>\r\n                    <div className=\"control\">\r\n                        <select value={this.state.memeTextSettings.fontFamily} style={{ fontFamily: this.state.memeTextSettings.fontFamily }} onChange={this.handleFontChange} id=\"fonts\" name=\"font\">\r\n                            <option value=\"Impact\" style={{ fontFamily: \"Impact\" }}>Impact</option>\r\n                            <option value=\"Comic Sans MS\" style={{ fontFamily: \"Comic Sans MS\" }}>Comic Sans MS</option>\r\n                            <option value=\"Helvetica\" style={{ fontFamily: \"Helvetica\" }}>Helvetica</option>\r\n                            <option value=\"Times New Roman\" style={{ fontFamily: \"Times New Roman\" }}>Times New Roman</option>\r\n                            <option value=\"Times\" style={{ fontFamily: \"Times\" }}>Times</option>\r\n                            <option value=\"Courier New\" style={{ fontFamily: \"Courier New\" }}>Courier New</option>\r\n                            <option value=\"Courier\" style={{ fontFamily: \"Courier\" }}>Courier</option>\r\n                            <option value=\"Verdana\" style={{ fontFamily: \"Verdana\" }}>Verdana</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"save-settings-button-wrapper\">\r\n                    <Button buttonText=\"Save Settings\" className=\"save-settings-button\" onButtonClick={this.getMemeTextSettings} buttonIcon={plusCircleIcon} />\r\n                </div>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeTextSettingsModal\r\n","import React from 'react'\r\nimport \"./meme-text-input.scss\";\r\nimport cog from \"../../assets/icons/cog.svg\";\r\nimport MemeTextSettingsModal from '../meme-text-settings-modal/MemeTextSettingsModal';\r\n\r\nclass MemeTextInput extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            textData: {\r\n                text: \"\",\r\n                settings: {\r\n                    color: \"#000000\",\r\n                    fontFamily: \"Impact\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onEnter = async (e) => {\r\n        if (e.key === 'Enter') {\r\n            let textData = { ...this.state.textData };\r\n            textData.text = e.target.value;\r\n            e.target.value = \" \";\r\n            await this.setState({ textData });\r\n            this.props.onTextInput(this.state.textData);\r\n        }\r\n    };\r\n\r\n    showModal = (_) => this.setState({ showModal: true });\r\n    \r\n\r\n    getMemeSettings = (settings) => {\r\n        this.onClose();\r\n        this.setState(prevState => ({\r\n            textData: {\r\n                ...prevState.textData,\r\n                settings: {\r\n                    ...settings\r\n                }\r\n            }\r\n        }))\r\n    }\r\n\r\n    onClose = () => this.setState({ showModal: false });\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"field\">\r\n                    <label className=\"label\" htmlFor={this.props.id}>{this.props.labelText}</label>\r\n                    <div className=\"control\">\r\n                        <input className=\"input\" type=\"text\" id={this.props.id} placeholder={this.props.placeholder} onKeyDown={this.onEnter} />\r\n                        <div className=\"form-controls\" onClick={this.showModal}>\r\n                            <div className=\"form-controls__settings\">\r\n                                <img className=\"icon mr-0\" alt=\"icon\" src={cog}></img>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <MemeTextSettingsModal showModal={this.state.showModal} getMemeSettings={this.getMemeSettings} onClose={this.onClose} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MemeTextInput;\r\n","import React from 'react'\r\nimport \"./header.scss\";\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header className=\"app-header\">\r\n            <h1>\r\n                <span className=\"underline-text\">MEME\r\n                <div className=\"title-underline\"></div></span> Generator\r\n            </h1>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { fabric } from \"fabric\";\r\nimport \"./meme-image.scss\"\r\n\r\nlet fabricObject = {};\r\nlet canvas;\r\n\r\nexport default class MemeImage extends React.Component {\r\n\r\n    componentDidMount() {\r\n        canvas = new fabric.Canvas('memeCanvas');\r\n    }\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            memeTextObject: {},\r\n        };\r\n        this.memeColRef = React.createRef();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        let stateChanges = {}\r\n\r\n        if (props.memeTextObject !== state.memeTextObject) {\r\n            stateChanges.memeTextObject = props.memeTextObject\r\n        }\r\n\r\n        return stateChanges;\r\n    }\r\n\r\n    getMemeDivWidth = (_) => this.memeColRef.current.offsetWidth;\r\n\r\n    getAppropriateCanvasHeight = (memeWidth, memeHeight) => {\r\n        let ratio = memeHeight / memeWidth;\r\n        let newHeight = ratio * this.getMemeDivWidth();\r\n        return newHeight;\r\n    }\r\n\r\n    componentDidUpdate(prevPrps, prevState) {\r\n\r\n        console.log(this.state.memeTextObject);\r\n        console.log(this.memeColRef.current.offsetWidth);\r\n        let memeTextObject = this.state.memeTextObject;\r\n        let imageToAddToMeme = this.props.imageToAddToMeme;\r\n\r\n        this.loadCanvasData(canvas);\r\n\r\n        if (this.props.memeBackgroundImage) {\r\n            this.loadBackgroundImageToCanvas(canvas, this.props.memeBackgroundImage.url);\r\n        }\r\n\r\n        if (memeTextObject.text !== \"\" && prevPrps.memeTextObject.text !== this.state.memeTextObject.text) {\r\n            this.addTextToCanvas(canvas, memeTextObject);\r\n        }\r\n\r\n        if (imageToAddToMeme) {\r\n            this.addImageToMeme(canvas, imageToAddToMeme);\r\n        }\r\n\r\n        this.saveCanvasData(canvas);\r\n\r\n        if (this.props.downloadCanvas) {\r\n            this.setState({ memeTextObject: {} });\r\n            this.props.onMemeTextClear();\r\n            this.saveImage(canvas);\r\n            this.deleteCanvasObjects(canvas);\r\n        }\r\n\r\n        if (this.props.resetCanvas) {\r\n            this.deleteCanvasObjects(canvas);\r\n            this.props.onCanvasReset();\r\n        }\r\n\r\n        canvas.on('mouse:out', (e) => this.handleMouseOut(e, canvas));\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    saveCanvasData(canvas) {\r\n        fabricObject = JSON.stringify(canvas.toJSON());\r\n    }\r\n\r\n    addImageToMeme = (canvas, imageObject) => {\r\n        let url = imageObject.url;\r\n\r\n        fabric.Image.fromURL(url, function (image) {\r\n            canvas.add(image);\r\n        });\r\n\r\n        this.props.onImageAddedToMeme();\r\n    }\r\n\r\n    deleteCanvasObjects(canvas) {\r\n        fabricObject = JSON.stringify(canvas.remove(...canvas.getObjects()));\r\n    }\r\n\r\n    saveImage = (canvas) => {\r\n        let link = document.createElement(\"a\");\r\n        link.href = canvas.toDataURL({\r\n            format: 'jpeg',\r\n            quality: 0.8\r\n        });\r\n        link.download = 'meme.png';\r\n        link.click();\r\n        this.onImageSaved();\r\n    }\r\n\r\n    onImageSaved = () => {\r\n        this.props.onImageDownloaded(true);\r\n    }\r\n\r\n\r\n    handleMouseOut(e, canvas) {\r\n        fabricObject = this.saveCanvasData(canvas);\r\n        canvas.renderAll();\r\n    }\r\n\r\n    loadCanvasData = (canvas) => {\r\n        canvas.loadFromJSON(fabricObject, function () {\r\n            canvas.renderAll();\r\n        });\r\n    }\r\n\r\n    addTextToCanvas(canvas, memeTextObject) {\r\n        console.log(\"Chaliraxa add text\");\r\n        canvas.add(new fabric.Text(memeTextObject.text, {\r\n            fontFamily: memeTextObject.settings.fontFamily,\r\n            fill: memeTextObject.settings.color,\r\n            left: 100,\r\n            top: 100\r\n        }));\r\n    }\r\n\r\n\r\n    loadBackgroundImageToCanvas(canvas, url) {\r\n\r\n        fabric.Image.fromURL(url, function (meme) {\r\n            let width = this.getMemeDivWidth();\r\n            let height = this.getAppropriateCanvasHeight(meme.width, meme.height);\r\n            canvas.setHeight(height);\r\n            canvas.setWidth(width);\r\n            canvas.setBackgroundImage(meme, canvas.renderAll.bind(canvas), {\r\n                scaleX: canvas.width / meme.width,\r\n                scaleY: canvas.height / meme.height\r\n            });\r\n        }.bind(this), {\r\n            crossOrigin: 'anonymous'\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.memeColRef}>\r\n                <canvas id=\"memeCanvas\" style={{ width: \"100% !important\", height: \"auto\" }} ></canvas>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport \"./meme-selection-image.scss\";\r\n\r\nexport default class MemeSelectionImage extends Component {\r\n\r\n    onMemeSelection(meme) {\r\n        this.props.onMemeSelection(meme);\r\n    }\r\n\r\n    memeSelectionImageStyle = (url) => {\r\n        return {\r\n            backgroundImage: `url(${url})`,\r\n            backgroundPosition: \"center center\",\r\n            backgroundSize: \"cover\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"meme-selection-image\" style={this.memeSelectionImageStyle(this.props.meme.url)} onClick={() => this.onMemeSelection(this.props.meme)} >\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport \"./meme-selection.scss\";\r\nimport MemeSelectionImage from \"../meme-selection-image/MemeSelectionImage\";\r\n\r\nclass MemeSelection extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            memes: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.memes.then(({ memes }) => {\r\n            this.setState({\r\n                memes: memes\r\n            });\r\n        });\r\n    }\r\n\r\n    onMemeSelection = (meme) => {\r\n        this.props.onMemeSelection(meme);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4>Popular</h4>\r\n                <div className=\"meme-selection-container\">\r\n                    {this.state.memes.map((meme, i) => (\r\n                        <MemeSelectionImage key={i} meme={meme} onMemeSelection={this.onMemeSelection} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeSelection;\r\n","const memeApiEndpoint = \"https://api.imgflip.com/get_memes\";\r\nconst axios = require('axios');\r\n\r\n\r\nconst getAllMemes = async (_) => {\r\n    const response = await axios.get(memeApiEndpoint).then((response) => {\r\n        const data = response.data;\r\n        return {\r\n            memes: data.data.memes.splice(0, 10)\r\n        }\r\n    }).catch(function (error) {\r\n        return \"Something went wrong: \" + error;\r\n    });\r\n    return response;\r\n}\r\n\r\n\r\nexport default getAllMemes","import React from 'react'\r\nimport Button from '../button/Button';\r\nimport Modal from \"../modal/Modal\";\r\nimport plusCircleIcon from '../../assets/icons/plus-circle.svg';\r\n\r\n\r\nclass MemeTextSettingsModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            image: null\r\n        }\r\n        this.imageUpload = React.createRef();\r\n    }\r\n\r\n    onClose = () => {\r\n        this.props.onClose();\r\n    }\r\n\r\n    getAppropriateFormat = (imageObj, callback) => {\r\n        let name = imageObj.name;\r\n        let url = URL.createObjectURL(imageObj);\r\n        let width = 2, height;\r\n        let img = new Image();\r\n        img.src = url;\r\n        img.onload = function () {\r\n            width = this.width;\r\n            height = this.height;\r\n\r\n            if (callback) callback({ name, url, width, height })\r\n        }\r\n    }\r\n\r\n    onImageChange = event => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            let uploadImage = event.target.files[0];\r\n            let self = this;\r\n            this.getAppropriateFormat(uploadImage, (imageObject) => {\r\n                self.setState({\r\n                    image: imageObject\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    clearImageUpload = _ => {\r\n        this.imageUpload.current.value = '';\r\n    }\r\n\r\n    addImage = _ => {\r\n        this.props.image(this.state.image);\r\n        this.props.onClose();\r\n        this.clearImageUpload();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Modal showModal={this.props.showModal} onClose={this.onClose}>\r\n                <input type=\"file\" name=\"myImage\" ref={this.imageUpload} onChange={this.onImageChange} />\r\n                <div className=\"save-settings-button-wrapper\">\r\n                    <Button buttonText=\"Add Image\" buttonIcon={plusCircleIcon} onButtonClick={this.addImage} />\r\n                </div>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeTextSettingsModal\r\n","import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport Button from './components/button/Button';\r\nimport plusCircleIcon from './assets/icons/plus-circle.svg';\r\nimport undoIcon from './assets/icons/undo-alt.svg';\r\n\r\nimport MemeTextInput from './components/meme-text-input/MemeTextInput';\r\nimport Header from './components/header/Header';\r\nimport MemeSelection from './components/meme-selection/MemeSelection';\r\nimport \"./sass/all.scss\";\r\nimport axios from \"axios\";\r\nimport api from \"./utils/api\";\r\nimport MemeImage from \"./components/meme-image/MemeImage\";\r\nimport ImageUploadModal from \"./components/image-upload-modal/ImageUploadModal\";\r\n\r\nexport default class App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentMeme: null,\r\n      textData: {\r\n        text: \"\",\r\n        settings: {\r\n          color: \"#000000\",\r\n          fontFamily: \"Impact\"\r\n        }\r\n      },\r\n      downloadMeme: false,\r\n      resetCanvas: false,\r\n      showImageBgUploadModal: false,\r\n      showImageAddModal: false,\r\n      memeBackgroundImage: null,\r\n      imageToAddToMeme: null,\r\n    }\r\n  }\r\n\r\n  onMemeSelection = (meme) => {\r\n    this.setState({ currentMeme: meme });\r\n  }\r\n\r\n  onTextInput = (memeTextObj) => {\r\n    this.setState({ textData: memeTextObj });\r\n  }\r\n\r\n  getMemeSettings = (value) => {\r\n    console.log(value);\r\n  }\r\n\r\n  downloadMeme = () => {\r\n    this.setState({ downloadMeme: true });\r\n  }\r\n\r\n  onImageDownloaded = (value) => {\r\n    this.setState({ downloadMeme: false });\r\n  }\r\n\r\n  onMemeTextClear = () => {\r\n    let textData = { ...this.state.textData };\r\n    textData.text = \"\";\r\n    this.setState({ textData });\r\n  }\r\n\r\n  resetCanvas = () => {\r\n    this.setState({ resetCanvas: true });\r\n  }\r\n\r\n  onCanvasReset = () => {\r\n    this.onMemeTextClear();\r\n    this.setState({ resetCanvas: false });\r\n  }\r\n\r\n  onShowImageBgUploadModalClose = () => {\r\n    this.setState({ showImageBgUploadModal: false });\r\n  }\r\n\r\n  onShowImageAddModalClose = () => {\r\n    this.setState({ showImageAddModal: false });\r\n  }\r\n\r\n  addYourOwnImage = () => {\r\n    this.setState({ showImageBgUploadModal: true });\r\n  }\r\n  addImageTomMeme = () => {\r\n    this.setState({ showImageAddModal: true });\r\n  }\r\n\r\n  addImage = (imageObj) => {\r\n    this.setState({ imageToAddToMeme: imageObj })\r\n  }\r\n\r\n  onImageAddedToMeme = _ => {\r\n    this.setState({ imageToAddToMeme: null });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <Header />\r\n          <section className=\"meme-generator-section\">\r\n            <div className=\"meme-grid\">\r\n              <div className=\"col meme-col\" ref={this.memeColRef}>\r\n                <MemeImage memeBackgroundImage={this.state.currentMeme} memeTextObject={this.state.textData} downloadCanvas={this.state.downloadMeme}\r\n                  onImageDownloaded={this.onImageDownloaded} onMemeTextClear={this.onMemeTextClear} resetCanvas={this.state.resetCanvas} onCanvasReset={this.onCanvasReset}\r\n                  imageToAddToMeme={this.state.imageToAddToMeme}  onImageAddedToMeme={this.onImageAddedToMeme}\r\n                />\r\n              </div>\r\n              <div className=\"col meme-creator-col\">\r\n                <div className=\"button-group\">\r\n                  <Button buttonText=\"Add Your Own Image\" buttonIcon={plusCircleIcon} onButtonClick={this.addYourOwnImage} />\r\n                  <Button buttonText=\"Add Image to Your Meme\" buttonIcon={plusCircleIcon} onButtonClick={this.addImageTomMeme} />\r\n                </div>\r\n                <div>\r\n                  <MemeSelection memes={api.getAllMemes(axios)} onMemeSelection={this.onMemeSelection} />\r\n                </div>\r\n                <div>\r\n                  <div className=\"meme-text-input\">\r\n                    <MemeTextInput label={\"text\"} id={\"memeText\"} labelText={\"Text\"} placeholder={\"Text\"} onTextInput={this.onTextInput} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"button-group create-meme-button-group\">\r\n                  <div className=\"reset-button-container\">\r\n                    <Button buttonText=\"Reset\" classes={\"--black\"} buttonIcon={undoIcon} onButtonClick={this.resetCanvas} />\r\n                  </div>\r\n                  <Button buttonText=\"Generate Meme\" buttonIcon={plusCircleIcon} onButtonClick={this.downloadMeme} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        </div>\r\n        <ImageUploadModal showModal={this.state.showImageBgUploadModal} onClose={this.onShowImageBgUploadModalClose} image={this.onMemeSelection} />\r\n        <ImageUploadModal showModal={this.state.showImageAddModal} onClose={this.onShowImageAddModalClose} image={this.addImage} />\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}